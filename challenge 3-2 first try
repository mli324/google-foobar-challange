package com.google.challenges; 

first thought:
    It looks like a dynamic programming question. I want to figure 
out a method to use the result of smaller n to calculate the result for bigger
n. We can map the number of possible combination of the stair case in a 2-d 
array with the largest number of brick in one stair of the staircase the y and
number of bricks left in the pool the x.

from 0-10 on both axis, the graph look like below
0 1 1 2 2 3 4 5 6 8 9
0 1 1 2 2 3 4 5 6 7 8
0 1 1 2 2 3 4 5 5 6 7
0 1 1 2 2 3 4 4 4 5 5
0 1 1 2 2 3 3 3 3 3 3
0 1 1 2 2 2 2 2 1 1 1
0 1 1 2 1 1 1 0 0 0 0
0 1 1 1 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0

I can make a map of 0-200 on both axis. The final result of n will be the number of [n-1][1] + [n-2][2] +......+[1][n-1];


public class Answer {   
    public static int[][] storage = new int[200][200];
    public static void makeArray(int[][] storage) {
        for (int i = 0; i < storage.length;i++){
            for(int j = 1; j <storage[i].length;j++) {
                if (j > i + 2) {
                    storage[i][j] = storage[i][j - 1];
                } else if(j > i) {
                    storage[i][j] = storage[i][j - 1] + 1;
                } else {
                    for (int k = 1; k < j;k++) {
                        storage[i][j]+=storage[k][i-k];
                    }
                }
                
            }
            
        }
        return;
    }
    public static int answer(int n) { 

        // Your code goes here.
        if(storage[0][1] == 0) {
            makeArray(storage);
        }
        int ans = 0;
        for(int i = 1; i < n; i++) {
            ans+=storage[n-i-1][i-1];
        }
        return ans;

    } 
}
